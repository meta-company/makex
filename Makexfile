#!makex
"""
Note: This file must be run with the MAKEX_DEVELOPER environment variable to something True.

"""
VENV = path("venv")
VERSION = "20240103"

target(
    name="hello-world",
    runs=[
        print("Hello World!"),
    ],
)

target(
    name="documents-html",
    requires=[
        ":venv",
        find("documents/source"),
        find("python"),
        "README.md",
    ],
    outputs=[
        "html/index.html",
    ],
    runs=[
        # Set the environment for future runnables.
        environment({
            "BUILDDIR": path("documents-html"),
            "LC_ALL": "C",
            "RELEASE": VERSION,
        }),
        shell(
            f"source {VENV}/bin/activate",
            #f"export LC_ALL=C",
            #f"export BUILDDIR={path('documents-html')}",
            f"make -e -C documents clean html",
        ),
        # all three of these are the same:
        #shell(f"xdg-open $PWD/_output_/documents-html/html/index.html")
        #shell(f"xdg-open {path('documents-html')}/html/index.html")
        #execute("xdg-open", path('documents-html') / "html/index.html")
    ],
)

# stage a direcory for a source package
target(
    name="source-package",
    requires=[
        find("python", glob("**/*.py")),
        ":build-completions",
    ],
    runs=[
        copy("python", exclude=[glob("**requirements*.txt"),glob("**pyproject.toml")]),
        copy("python/pyproject.toml"),
        sync(["documents/Makefile"]), # "documents/source"
        copy("Makexfile"),
        copy("README.md"), #archive(f"makex-{VERSION}-source.zip"),
        copy(
            ["scripts/completions/makex.bash", "scripts/completions/makex.zsh"],
            "python/makex/data/completions"
        ),
        write("python/makex/version.py", f"""VERSION="{VERSION}"\n"""),
    ],
)

# Build and deploy the latest version
target(
    name="pypi",
    requires=[
        ":source-package",
        ":venv",
    ],
    runs=[
        shell(
            f"source {VENV}/bin/activate",
            f"python -m build {path('source-package')} --sdist --outdir {path('pypi')}",
            # build the wheel from the source distribution.
            # python -m build --wheel --outdir {path('pypi')} .
            f"metacompany-twine {path('pypi')}/*",
        )
    ],
)

PEX_ROOT = path("install-pex")

PEX_ARGS = []
PEX_ARGS += [f"--pex-root", f"{PEX_ROOT}"]
PEX_ARGS += ["-P", "makex@python"]
PEX_ARGS += ["-m", "makex"]
PEX_ARGS += ["--sh-boot"]
PEX_ARGS += ["--no-wheel", "--pip-version=latest"]
PEX_ARGS += ["--requirement", "python/requirements.txt"]
# XXX: this doesn't work for some reason
#PEX_ARGS+= ["--interpreter-constraint", "CPython>=3.9"]

target(
    name="install-pex",
    requires=[
        ":venv",
        ":source-package",
    ],
    runs=[
        shell(
            f"source {VENV}/bin/activate",
        ),
        execute(
            f"{VENV}/bin/pex",
            PEX_ARGS,
            "--output-file",
            home() / ".local/bin/makex",
        ),
        # Shells/arguments can be difficult to handle, execute() makes it easier
        #shell(
        #    f"{VENV}/bin/pex {space_join(PEX_ARGS)} --output-file ~/.local/bin/makex  {space_join(PEX_REQUIREMENTS)}",
        #),
    ],
    outputs=[
        home() / ".local/bin/makex",
    ]
)

# create a venv
target(
    name="venv",
    requires=[
        "python/requirements.txt",
        "python/requirements-documents.txt",
        "python/requirements-build.txt",
    ],
    outputs=[
        VENV / "pyvenv.cfg",
    ],
    runs=[
        shell(
            # venv throws an error if it already exists or if it is a symlink. we need to use a subdirectory
            # Error: Unable to create directory '...'
            f"python3 -m venv --clear {VENV}",
            f"source {VENV}/bin/activate",
            f"{VENV}/bin/pip install --upgrade pip",
            f"{VENV}/bin/pip install -r python/requirements.txt",
            f"{VENV}/bin/pip install -r python/requirements-documents.txt",
            f"{VENV}/bin/pip install -r python/requirements-build.txt",
        ),
    ],
)

target(
    name="mypy",
    runs=[
        ## || exit 0 because mypy returns a non-zero which causes makex to report errors
        shell(
            # --cache-dir= because we don't want to pollute the source with .mypy_cache directories
            # mypy returns a non-zero exit code so we have to use || exit 0
            f"mypy --cache-dir={path('mypy')} --follow-imports=silent --config-file python/mypy.ini --explicit-package-bases --show-absolute-path -p makex || exit 0",
        )
    ]
)

target(
    name="build-completions",
    requires=[
        ":venv",
    ],
    runs=[
        shell(
            f"source {VENV}/bin/activate",
            # TODO: patch shtab to take preamble from file
            #"preamble=\"$(cat scripts/bash-completion/makex-preamble.bash)\"",
            #f"cd python && shtab --shell=bash -u makex.__main__.parser --preamble \"${{preamble}}\" | tee {source('scripts/bash-completion/makex.bash')}", #
            "cd python",
            f"python -m makex completions --shell bash {source('scripts/completions/makex.bash')}", #
            f"python -m makex completions --shell zsh {source('scripts/completions/makex.zsh')}", #
        )
    ]
    # makex completions --print bash > ~/.local/share/bash-completion/completions/makex
)
